{
  "openapi": "3.0.0",
  "info": {
    "title": "Next Keep API",
    "version": "1.0"
  },
  "tags": [
    {
      "name": "groups",
      "description": "Routes for the groups"
    },
    {
      "name": "locale",
      "description": "Routes for the locale"
    },
    {
      "name": "notes",
      "description": "Routes for the notes"
    }
  ],
  "components": {
    "schemas": {
      "Group": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "required": true
          }
        }
      },
      "Note": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "required": "true"
          },
          "data": {
            "type": "string",
            "required": "true"
          },
          "isPinned": {
            "type": "boolean"
          },
          "publishedDate": {
            "type": "string"
          },
          "updatedDate": {
            "type": "string"
          }
        }
      }
    }
  },
  "paths": {
    "/api/groups_appwrite?id={id}": {
      "get": {
        "summary": "Return a group using the ID",
        "tags": [
          "groups"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "description": "ID of the group to get",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the group object with that ID"
          },
          "400": {
            "description": "The ID provided doesn't exist in the database"
          }
        }
      },
      "delete": {
        "tags": [
          "groups"
        ],
        "summary": "Deletes a group",
        "description": "Deletes a group from the database",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "description": "ID of the group to update",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deletes the group"
          },
          "400": {
            "description": "ID has not been provided to delete the group or the ID provided doesn't exist in the database."
          }
        }
      },
      "put": {
        "tags": [
          "groups"
        ],
        "summary": "Updates the name of the group",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "description": "ID of the group to update",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "title",
            "description": "The new title of the group",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Updates the note group succesfully"
          },
          "400": {
            "description": "Title or id have not been provided, or the ID provided doesn't exist in the database."
          }
        }
      }
    },
    "/api/groups_appwrite?title={title}": {
      "get": {
        "summary": "Returns the group that uses that title",
        "tags": [
          "groups"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "title",
            "description": "Returns the group that uses that title",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the group that contains the title"
          },
          "400": {
            "description": "No group found with that title"
          }
        }
      }
    },
    "/api/groups_appwrite?userId={userId}": {
      "get": {
        "summary": "Returns the group that uses that title",
        "tags": [
          "groups"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "userId",
            "description": "Returns the groups that belongs to the user with that ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the groups that belong to the user with that ID"
          }
        }
      }
    },
    "/api/groups": {
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Creates a new group",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Creates the new group succesfully"
          },
          "400": {
            "description": "Title has not been provided"
          }
        }
      },
      "get": {
        "summary": "Returns the list of all groups",
        "description": "Returns the list of all groups from the database",
        "tags": [
          "groups"
        ],
        "responses": {
          "200": {
            "description": "Returns the list of groups"
          },
          "400": {
            "description": "Failed to connect to the database"
          }
        }
      }
    },
    "/api/groups?id={id}": {
      "get": {
        "summary": "Return a group using the ID",
        "tags": [
          "groups"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "description": "ID of the group to get",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the group object with that ID"
          },
          "400": {
            "description": "The ID provided doesn't exist in the database"
          }
        }
      },
      "delete": {
        "tags": [
          "groups"
        ],
        "summary": "Deletes a group",
        "description": "Deletes a group from the database",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "description": "ID of the group to update",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deletes the group"
          },
          "400": {
            "description": "ID has not been provided to delete the group or the ID provided doesn't exist in the database."
          }
        }
      },
      "put": {
        "tags": [
          "groups"
        ],
        "summary": "Updates the name of the group",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "description": "ID of the group to update",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "title",
            "description": "The new title of the group",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Updates the note group succesfully"
          },
          "400": {
            "description": "Title or id have not been provided, or the ID provided doesn't exist in the database."
          }
        }
      }
    },
    "/api/groups?sort={sort}": {
      "get": {
        "summary": "Returns the list of all groups sorted alphabetically",
        "tags": [
          "groups"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "sort",
            "description": "Sorts the list of groups alphabetically",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of groups alphabetically"
          },
          "400": {
            "description": "Failed to connect to the database"
          }
        }
      }
    },
    "/api/groups?title={title}": {
      "get": {
        "summary": "Returns the group that uses that title",
        "tags": [
          "groups"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "title",
            "description": "Returns the group that uses that title",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the group that contains the title"
          },
          "400": {
            "description": "No group found with that title"
          }
        }
      }
    },
    "/api/locale": {
      "get": {
        "tags": [
          "locale"
        ],
        "summary": "Returns the current locale",
        "description": "Returns the current locale from the **NEXT_LOCALE** cookie.",
        "responses": {
          "200": {
            "description": "Returns the current locale"
          },
          "400": {
            "description": "The cookie **NEXT_LOCALE** does not exist"
          }
        }
      }
    },
    "/api/notes?userId={userId}": {
      "get": {
        "tags": [
          "notes"
        ],
        "summary": "Returns all the notes",
        "description": "Returns all the notes of the user with that ID",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "ID of the user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all the notes of the user with that ID"
          }
        }
      }
    },
    "/api/notes?amount": {
      "get": {
        "tags": [
          "notes"
        ],
        "summary": "Returns the amount of notes of every group",
        "description": "Returns the amount of notes of every group from the database.",
        "parameters": [
          {
            "name": "amount",
            "in": "query",
            "description": "Flag that tells the API to return the amount of notes of every group",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the amount of notes of every group"
          },
          "400": {
            "description": "Failed to connect to the database"
          }
        }
      }
    },
    "/api/notes?group={groupId}": {
      "get": {
        "tags": [
          "notes"
        ],
        "summary": "Returns the notes of the group with that ID",
        "description": "Returns the notes of the group with that ID from the database.",
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "description": "ID for the note to get",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the note list of the group with that ID"
          },
          "400": {
            "description": "The ID provided doesn't exist in the DB"
          }
        }
      }
    },
    "/api/notes?id={id}": {
      "get": {
        "tags": [
          "notes"
        ],
        "summary": "Returns the note with that ID",
        "description": "Returns the note with that ID from the database.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID for the note to get",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the note with that ID"
          },
          "400": {
            "description": "The ID provided doesn't exist in the DB"
          }
        }
      }
    },
    "/api/notes?pinned={pinned}": {
      "get": {
        "tags": [
          "notes"
        ],
        "summary": "Returns all the pinned notes",
        "description": "Returns all the pinned notes from the database.",
        "parameters": [
          {
            "name": "pinned",
            "in": "query",
            "description": "Tells the API to retrieve only the pinned notes",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all the pinned notes"
          },
          "400": {
            "description": "Failed to connect to the database"
          }
        }
      }
    },
    "/api/notes": {
      "post": {
        "tags": [
          "notes"
        ],
        "summary": "Creates a new note",
        "description": "Creates a new note on the database",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Note"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Note is created successfully and inserted to the DB"
          },
          "400": {
            "description": "Body object must have a title and the data"
          }
        }
      },
      "put": {
        "tags": [
          "notes"
        ],
        "summary": "Updates a existing note",
        "description": "Updates a note on the database with new title or data",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID of the note to update",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "body",
            "in": "header",
            "description": "Body that contains the new title and/or data of the note",
            "schema": {
              "type": "object"
            },
            "required": true
          }
        ]
      },
      "responses": {
        "201": {
          "description": "Note is updated successfully on the DB"
        },
        "400": {
          "description": "ID and body object must have a title and the data, or ID doesn't exists in the DB."
        }
      },
      "delete": {
        "tags": [
          "notes"
        ],
        "summary": "Deletes an existing note",
        "description": "Deletes an existing note on the database",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID of the note to delete",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Note is deleted successfully on the DB"
          },
          "400": {
            "description": "The ID provided doesn't exist in the DB or no ID provided in the query."
          }
        }
      },
      "get": {
        "tags": [
          "notes"
        ],
        "summary": "Returns all the notes",
        "description": "Returns all the notes from the database.",
        "responses": {
          "200": {
            "description": "Returns all the notes"
          },
          "400": {
            "description": "Failed to connect to the database"
          }
        }
      }
    }
  }
}